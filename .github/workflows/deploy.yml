# .github/workflows/deploy.yml

name: Build and Deploy to Production

# Kích hoạt workflow khi có push vào nhánh 'main'
on:
  push:
    branches: [ "main" ]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest # Sử dụng máy ảo Ubuntu mới nhất

    steps:
      # Step 1: Lấy mã nguồn từ repo về
      - name: Checkout code
        uses: actions/checkout@v4

      # Step 2: Đăng nhập vào Docker Hub
      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Step 3: Build và đẩy ảnh Docker cho Frontend
      - name: Build and push Frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./front-end/fe-project-manager  # Thư mục chứa Dockerfile của frontend
          file: ./front-end/fe-project-manager/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/prm-frontend:latest

      # Step 4: Build và đẩy ảnh Docker cho Backend
      - name: Build and push Backend image
        uses: docker/build-push-action@v5
        with:
          context: ./back-end # Thư mục chứa Dockerfile của backend
          file: ./back-end/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/prm-backend:latest

      # Step 5: Tạo file .env.prod từ GitHub Secrets
      # Cách này giúp không cần lưu file .env trong repo
      - name: Create .env file
        run: echo "${{ secrets.PROD_ENV_FILE }}" > .env

      # Step 6: Tạo file deploy.sh để thực thi trên server
      - name: Create deploy script
        run: |
          echo '#!/bin/bash' > deploy.sh
          echo 'set -e' >> deploy.sh # Dừng ngay khi có lỗi
          echo '' >> deploy.sh
          echo '# Go to folder server' >> deploy.sh
          echo 'cd /srv/prm-app' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Pull images latest from Docker Hub' >> deploy.sh
          echo 'docker compose pull' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Disable and delete container then' >> deploy.sh
          echo 'docker compose down' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Start docker-compose' >> deploy.sh
          echo 'docker compose -f docker-compose.prod.yml up -d' >> deploy.sh
          echo '' >> deploy.sh
          echo '# Disable all docker container not use' >> deploy.sh
          echo 'docker image prune -af' >> deploy.sh
          echo '' >> deploy.sh
          echo 'echo "✅ Deployment completed successfully!"' >> deploy.sh

      - name: Add server to known_hosts
        run: |
          mkdir -p ~/.ssh
          ssh-keyscan ${{ secrets.SSH_HOST }} >> ~/.ssh/known_hosts

      # Step 7: Sao chép các file cấu hình cần thiết đến server
      - name: Copy files to server via SCP
        uses: appleboy/scp-action@v0.1.4
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          source: "nginx.conf,docker-compose.prod.yml,.env,deploy.sh" # Các file cần đẩy đi
          target: "/srv/prm-app" # Thư mục đích trên server
          strip_components: 1 # Loại bỏ thư mục cha không cần thiết

      # Step 8: Thực thi script triển khai trên server
      - name: Execute deployment script on server
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          script: |
            cd /srv/prm-app
            ls -a
            chmod +x deploy.sh
            ./deploy.sh